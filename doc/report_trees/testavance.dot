digraph {

	ordering=out;
	ranksep=.4;
  margin=0;
	bgcolor="white"; node [shape=box, fixedsize=false, fontsize=12, fontname="Helvetica-bold", fontcolor="black"
		width=.25, height=.25, color="#444444", fillcolor="white", style="filled, solid"];
	edge [arrowsize=.5, color="#444444"]

  n0 [label="ROOT"];
  n1 [label="BLOCK"];
  n1 [label="BLOCK"];
  n2 [label="IF_STATEMENT"];
  n2 [label="IF_STATEMENT"];
  n3 [label="IF_DEF"];
  n3 [label="IF_DEF"];
  n4 [label="=>"];
  n4 [label="=>"];
  n5 [label="a"];
  n6 [label="b"];
  n7 [label="THEN_DEF"];
  n7 [label="THEN_DEF"];
  n8 [label="ASSIGNMENT"];
  n8 [label="ASSIGNMENT"];
  n9 [label="a"];
  n10 [label="b"];
  n11 [label="ELSE_DEF"];
  n11 [label="ELSE_DEF"];
  n12 [label="ASSIGNMENT"];
  n12 [label="ASSIGNMENT"];
  n13 [label="s"];
  n14 [label="INT"];
  n14 [label="INT"];
  n15 [label="2"];
  n16 [label="BLOCK"];
  n16 [label="BLOCK"];
  n17 [label="VAR_DEC"];
  n17 [label="VAR_DEC"];
  n18 [label="integer"];
  n19 [label="ID_LIST"];
  n19 [label="ID_LIST"];
  n20 [label="a"];
  n21 [label="FOR_CLAUSE"];
  n21 [label="FOR_CLAUSE"];
  n22 [label="INIT"];
  n22 [label="INIT"];
  n23 [label="ASSIGNMENT"];
  n23 [label="ASSIGNMENT"];
  n24 [label="i"];
  n25 [label="INT"];
  n25 [label="INT"];
  n26 [label="1"];
  n27 [label="STEP"];
  n27 [label="STEP"];
  n28 [label="INT"];
  n28 [label="INT"];
  n29 [label="1"];
  n30 [label="UNTIL"];
  n30 [label="UNTIL"];
  n31 [label="INT"];
  n31 [label="INT"];
  n32 [label="100"];
  n33 [label="DO"];
  n33 [label="DO"];
  n34 [label="BLOCK"];
  n34 [label="BLOCK"];
  n35 [label="ASSIGNMENT"];
  n35 [label="ASSIGNMENT"];
  n36 [label="x"];
  n37 [label="i"];
  n38 [label="PROC_DEC"];
  n38 [label="PROC_DEC"];
  n39 [label="real"];
  n40 [label="PROC_HEADING"];
  n40 [label="PROC_HEADING"];
  n41 [label="PARAM_PART"];
  n41 [label="PARAM_PART"];
  n42 [label="ID_LIST"];
  n42 [label="ID_LIST"];
  n43 [label="a"];
  n44 [label="b"];
  n45 [label="x"];
  n46 [label="VALUE_PART"];
  n46 [label="VALUE_PART"];
  n47 [label="ID_LIST"];
  n47 [label="ID_LIST"];
  n48 [label="a"];
  n49 [label="b"];
  n50 [label="x"];
  n51 [label="SPEC_PART"];
  n51 [label="SPEC_PART"];
  n52 [label="ARG_TYPE"];
  n52 [label="ARG_TYPE"];
  n53 [label="real"];
  n54 [label="ID_LIST"];
  n54 [label="ID_LIST"];
  n55 [label="a"];
  n56 [label="b"];
  n57 [label="x"];
  n58 [label="BLOCK"];
  n58 [label="BLOCK"];
  n59 [label="ASSIGNMENT"];
  n59 [label="ASSIGNMENT"];
  n60 [label="linearFunc"];
  n61 [label="ADD"];
  n61 [label="ADD"];
  n62 [label="a"];
  n63 [label="MULT"];
  n63 [label="MULT"];
  n64 [label="b"];
  n65 [label="x"];
  n66 [label="PROC_CALL"];
  n66 [label="PROC_CALL"];
  n67 [label="linearFunc"];
  n68 [label="PARAM_LIST"];
  n68 [label="PARAM_LIST"];
  n69 [label="a"];
  n70 [label="b"];
  n71 [label="c"];
  n72 [label="LABEL_DEC"];
  n72 [label="LABEL_DEC"];
  n73 [label="startlabel"];
  n74 [label="ASSIGNMENT"];
  n74 [label="ASSIGNMENT"];
  n75 [label="n"];
  n76 [label="ADD"];
  n76 [label="ADD"];
  n77 [label="n"];
  n78 [label="INT"];
  n78 [label="INT"];
  n79 [label="1"];
  n80 [label="GOTO"];
  n80 [label="GOTO"];
  n81 [label="startlabel"];

  n0 -> n1 // "ROOT" -> "BLOCK"
  n1 -> n2 // "BLOCK" -> "IF_STATEMENT"
  n2 -> n3 // "IF_STATEMENT" -> "IF_DEF"
  n3 -> n4 // "IF_DEF" -> "=>"
  n4 -> n5 // "=>" -> "a"
  n4 -> n6 // "=>" -> "b"
  n2 -> n7 // "IF_STATEMENT" -> "THEN_DEF"
  n7 -> n8 // "THEN_DEF" -> "ASSIGNMENT"
  n8 -> n9 // "ASSIGNMENT" -> "a"
  n8 -> n10 // "ASSIGNMENT" -> "b"
  n2 -> n11 // "IF_STATEMENT" -> "ELSE_DEF"
  n11 -> n12 // "ELSE_DEF" -> "ASSIGNMENT"
  n12 -> n13 // "ASSIGNMENT" -> "s"
  n12 -> n14 // "ASSIGNMENT" -> "INT"
  n14 -> n15 // "INT" -> "2"
  n1 -> n16 // "BLOCK" -> "BLOCK"
  n16 -> n17 // "BLOCK" -> "VAR_DEC"
  n17 -> n18 // "VAR_DEC" -> "integer"
  n17 -> n19 // "VAR_DEC" -> "ID_LIST"
  n19 -> n20 // "ID_LIST" -> "a"
  n1 -> n21 // "BLOCK" -> "FOR_CLAUSE"
  n21 -> n22 // "FOR_CLAUSE" -> "INIT"
  n22 -> n23 // "INIT" -> "ASSIGNMENT"
  n23 -> n24 // "ASSIGNMENT" -> "i"
  n23 -> n25 // "ASSIGNMENT" -> "INT"
  n25 -> n26 // "INT" -> "1"
  n21 -> n27 // "FOR_CLAUSE" -> "STEP"
  n27 -> n28 // "STEP" -> "INT"
  n28 -> n29 // "INT" -> "1"
  n21 -> n30 // "FOR_CLAUSE" -> "UNTIL"
  n30 -> n31 // "UNTIL" -> "INT"
  n31 -> n32 // "INT" -> "100"
  n21 -> n33 // "FOR_CLAUSE" -> "DO"
  n33 -> n34 // "DO" -> "BLOCK"
  n34 -> n35 // "BLOCK" -> "ASSIGNMENT"
  n35 -> n36 // "ASSIGNMENT" -> "x"
  n35 -> n37 // "ASSIGNMENT" -> "i"
  n1 -> n38 // "BLOCK" -> "PROC_DEC"
  n38 -> n39 // "PROC_DEC" -> "real"
  n38 -> n40 // "PROC_DEC" -> "PROC_HEADING"
  n40 -> n41 // "PROC_HEADING" -> "PARAM_PART"
  n41 -> n42 // "PARAM_PART" -> "ID_LIST"
  n42 -> n43 // "ID_LIST" -> "a"
  n42 -> n44 // "ID_LIST" -> "b"
  n42 -> n45 // "ID_LIST" -> "x"
  n40 -> n46 // "PROC_HEADING" -> "VALUE_PART"
  n46 -> n47 // "VALUE_PART" -> "ID_LIST"
  n47 -> n48 // "ID_LIST" -> "a"
  n47 -> n49 // "ID_LIST" -> "b"
  n47 -> n50 // "ID_LIST" -> "x"
  n40 -> n51 // "PROC_HEADING" -> "SPEC_PART"
  n51 -> n52 // "SPEC_PART" -> "ARG_TYPE"
  n52 -> n53 // "ARG_TYPE" -> "real"
  n52 -> n54 // "ARG_TYPE" -> "ID_LIST"
  n54 -> n55 // "ID_LIST" -> "a"
  n54 -> n56 // "ID_LIST" -> "b"
  n54 -> n57 // "ID_LIST" -> "x"
  n38 -> n58 // "PROC_DEC" -> "BLOCK"
  n58 -> n59 // "BLOCK" -> "ASSIGNMENT"
  n59 -> n60 // "ASSIGNMENT" -> "linearFunc"
  n59 -> n61 // "ASSIGNMENT" -> "ADD"
  n61 -> n62 // "ADD" -> "a"
  n61 -> n63 // "ADD" -> "MULT"
  n63 -> n64 // "MULT" -> "b"
  n63 -> n65 // "MULT" -> "x"
  n1 -> n66 // "BLOCK" -> "PROC_CALL"
  n66 -> n67 // "PROC_CALL" -> "linearFunc"
  n66 -> n68 // "PROC_CALL" -> "PARAM_LIST"
  n68 -> n69 // "PARAM_LIST" -> "a"
  n68 -> n70 // "PARAM_LIST" -> "b"
  n68 -> n71 // "PARAM_LIST" -> "c"
  n1 -> n72 // "BLOCK" -> "LABEL_DEC"
  n72 -> n73 // "LABEL_DEC" -> "startlabel"
  n1 -> n74 // "BLOCK" -> "ASSIGNMENT"
  n74 -> n75 // "ASSIGNMENT" -> "n"
  n74 -> n76 // "ASSIGNMENT" -> "ADD"
  n76 -> n77 // "ADD" -> "n"
  n76 -> n78 // "ADD" -> "INT"
  n78 -> n79 // "INT" -> "1"
  n1 -> n80 // "BLOCK" -> "GOTO"
  n80 -> n81 // "GOTO" -> "startlabel"

}
