@startuml ast_visitor

skinparam Shadowing false
skinparam ArrowColor #222
skinparam ClassBorderColor #bbb
skinparam ClassBackgroundColor white
skinparam DefaultFontName Liberation Mono
skinparam RoundCorner 8

package eu.telecomnancy.ast {

class ASTAdaptor {
    + @Override\nObject create(Token t)
}
org.antlr.runtime.tree.CommonTreeAdaptor <|-- ASTAdaptor
org.antlr.runtime.tree.CommonTreeAdaptor .[hidden]right. org.antlr.runtime.tree.CommonTree
class DefaultAST {
    + DefaultAST(Token t)
    + <R> R accept(ASTVisitor v)
}
DefaultAST <|-- RootAST
DefaultAST <|-- BlockAST
DefaultAST <|-- VarDecAST
DefaultAST -up-|> org.antlr.runtime.tree.CommonTree
DefaultAST .up.|> java.util.Iterable: <DefaultAST>

interface java.util.Iterable<E> {
    + Iterator<E> iterator()
}

class RootAST {
    + RootAST(Token t)
    + @Override\n<R> R accept(ASTVisitor v)
}
class BlockAST {
    + BlockAST(Token t)
    + @Override\n<R> R accept(ASTVisitor v)
}
class VarDecAST {
    + VarDecAST(Token t)
    + @Override\n<R> R accept(ASTVisitor v)
}

interface ASTVisitor<R> {
    + R visit(DefaultAST b)
    + R visit(RootAST r)
    + R visit(BlockAST b)
    + R visit(VarDecAST v)
}
ASTVisitor <|.down. eu.telecomnancy.semantic.SemanticAnalysisVisitor: <Type>

}
' package end

package eu.telecomnancy.semantic {
    class SemanticException {
        - int line = -1
        + SemanticException(String msg)
        + SemanticException(String msg, int line)
        + print()
    }
    java.lang.RuntimeException <|-- SemanticException
    SemanticAnalysisVisitor .up.> SemanticException: (throws)
}
' package end

@enduml