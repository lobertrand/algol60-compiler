
plugins {
    // Apply the java plugin to add support for Java
    id 'java'

    // Apply the application plugin to add support for building a CLI application
    id 'application'

    // Apply the ANTLR pugin to add support for using ANTLR
    // More info here : https://docs.gradle.org/current/userguide/antlr_plugin.html
    id 'antlr'

    // Code formatting
    id "com.diffplug.gradle.spotless" version "3.26.1"
}

repositories {
    // Use jcenter for resolving dependencies.
    // You can declare any Maven/Ivy/file repository here.
    mavenCentral()
}

dependencies {
    // Use JUnit test framework
    testImplementation 'junit:junit:4.12'
    testCompile group: 'pl.pragmatists', name: 'JUnitParams', version: '0.3.6'

    // use ANTLR version 3
    antlr "org.antlr:antlr-complete:3.5.2"
    compile "org.antlr:antlr-runtime:3.5.2"
}

application {
    // Define the main class for the application
    mainClassName = 'eu.telecomnancy.Main'
    sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = JavaVersion.VERSION_1_8
}

spotless {
    java {
        target 'src/**/*.java'
        googleJavaFormat().aosp()
    }
}

processResources {
    dependsOn spotlessJavaApply
}

run {
    standardInput = System.in 
}

generateGrammarSource {
    maxHeapSize = "64m"
    arguments += ["-visitor", "-long-messages"]
}

jar {
    manifest {
        attributes 'Main-Class': 'eu.telecomnancy.Main'
    }
    from {
        configurations.runtime.collect { it.isDirectory() ? it : zipTree(it) }
    }
}

test {
    testLogging {
        afterSuite { desc, result ->
            if (!desc.parent) { // will match the outermost suite
                println "Results: ${result.resultType} (${result.testCount} tests, ${result.successfulTestCount} successes, ${result.failedTestCount} failures, ${result.skippedTestCount} skipped)"
            }
        }
    }
}